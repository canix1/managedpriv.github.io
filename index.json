[{"categories":null,"contents":"AD ACL Scanner Current version Version: 6.0\n9 February, 2020\nSHA256: E50D408747E98CE7575A845DE82234A23A08632D45DEC1AF8FC2BAADF94EE92C\nNew Feature\n New improved UI More functions available from the command line Scan GPO permissions Filter permissions on criticality [Critical, Warning, Medium, Low, Info] Filter on Default Permissions Filter on Built-in Security Principals Recursive find group members, will list all resulting security principals in the ACL Recursive find filter, filter recursive results [*, User, Group, Computer]  Download Release\nDonate Do you appreciate my work and want to buy me a beer? You can donate via PayPal: https://www.paypal.me/canix1 or send Bitcoins to bc1qte7vlwhvrju7msv9hzfytwy7jd9vlmnjfpm0366d62yx4ke89czsavk0hrDescription  A tool completly written in PowerShell. A tool with GUI used to create reports of access control lists (DACLs) and system access control lists (SACLs) in Active Directory .  Related blog posts\n Forensics - Active Directory ACL Investigation Take Control Over AD Permissions And The AD ACL Scanner Tool  History Features and fixes https://github.com/canix1/ADACLScanner/wiki/History\n16 May,2019  Fixing problem with effective rights.  New Features   Run effective rights report from the command line.\n  parameter from command line to get modified date of security descriptor in report.   Save to excel file without excel installed. Both from UI and command line. Requires ImportExcel PowerShell Module. You can install ImportExcel directly from the Powershell Gallery.   Command line support.   Custom search filter for scanning objects.\n  Support input from pipeline. You can call ADACLScan.ps1 by sending a distinguishedName via pipeline.\n  Added formated synopsis to the script.\n  Feature list  Scan linked Group Policy Objects View HTML reports of DACLs/SACLs and save it to disk. Export DACLs/SACLs on Active Directory objects in a CSV format. Export DACLs/SACLs on Active Directory objects in a Excel sheet. Connect and browse you default domain, schema , configuration or a naming context defined by distinguishedname. Browse naming context by clicking you way around, either by OU�s or all types of objects. Report only explicitly assigned DACLs/SACLs. Report on OUs , OUs and Container Objects or all object types. Filter DACLs/SACLs for a specific access type.. Where does �Deny� permission exists? Filter DACLs/SACLs for a specific identity. Where does \u0026ldquo;Domain\\Client Admins\u0026rdquo; have explicit access? Or use wildcards like \u0026ldquo;jdoe\u0026rdquo;. Filter DACLs/SACLs for permission on specific object. Where are permissions set on computer objects? Skip default permissions (defaultSecurityDescriptor) in report. Makes it easier to find custom permissions. Report owner of object. Compare previous results with the current configuration and see the differences by color scheme (Green=matching permissions, Yellow= new permissions, Red= missing permissions). Report when permissions were modified Can use AD replication metadata when comparing. Can convert a previously created CSV file to a HTML report. Effective rights, select a security principal and match it agains the permissions in AD. Color coded permissions based on criticality when using effective rights scan. List you domains and select one from the list. Get the size of the security descriptor (bytes). Rerporting on disabled inheritance . Get all inherited permissions in report. HTLM reports contain headers. Summary of criticality for all report types. Refresh Nodes by right-click container object. Exclude of objects from report by matching string to distinguishedName You can take a CSV file from one domain and use it for another. With replacing the old DN with the current domains you can resuse reports between domains. You can also replace the (Short domain name)Netbios name security principals. Reporting on modified default security descriptors in Schema. Verifying the format of the CSV files used in convert and compare functions. When compairing with CSV file Nodes missing in AD will be reported as \u0026ldquo;Node does not exist in AD\u0026rdquo; The progress bar can be disabled to gain speed in creating reports. If the fist node in the CSV file used for compairing can\u0026rsquo;t be connected the scan will stop. Display group members in groups in the HTLM report. Present the value of the true SDDL in NTsecurityDescriptor, bypassing Object-Specific ACE merge done when a new instance of the ObjectSecurity class is initialized.  System requirements  Powershell 3.0 or above PowerShell using a single-threaded apartment Some functions requires Microsoft .NET Framework version 4.0  ","permalink":"https://managedpriv.com/project/ad-acl-scanner/","tags":null,"title":"AD ACL Scanner"},{"categories":["passwords"],"contents":"This is a repost of my previous post at the no longer existing bloghttp://blogs.technet.com/b/pfesweplat/archive/2012/12/11/do-you-allow-blank-passwords-in-your-environment.aspxDo you or did you back in the days use your own code or a third party tool to create user accounts that did not update the userAccountControl attribute after the account was created? Well then there\u0026rsquo;s a change you might have accounts in your domain that are allowed blank passwords or even worse have accounts with blank passwords! Why! Because user objects are allowed blank passwords by default when created, something that must be handle afterwards. Unless that\u0026rsquo;s in line with your security policy ;) This is the default setting of userAccountControl at user object creation: userAccountControl: 0x222 = (ACCOUNTDISABLE | PASSWD_NOTREQD | NORMAL_ACCOUNT); How does this setting affect my environment? Q:We have a password policy in our domain that does not allow blank passwords, are we protected from blank passwords? A:No, this setting overrides the password policy in the domain or your fine grained password policy when you do reset passwordoperations.\n So when is the \u0026ldquo;blank password\u0026rdquo; setting on user accounts effective:\nWhen users are delegated the permissions to do password resets on user accounts with ADS_UF_PASSWD_NOTREQD, they can set a blank password.\n A normal change password procedure by a user do not follow the ADS_UF_PASSWD_NOTREQD, it will follow the password policy in your domain or fine grained password policy if you got defined for the user.\nSo let say that an user with the delegate right to do password reset accidentally press OK in the password reset dialog box without the \u0026ldquo;User must change password at next logon\u0026rdquo; or someone in your organization with permissions to create user objects accentually runs a script that sets blank password. Then you will have accounts in you domain with no password. How do I find accounts with ADS_UF_PASSWD_NOTREQD? How will I know any of the accounts in my domain have \u0026ldquo;password not required\u0026rdquo; set? The easiest way to do it is to do a search with ADUC (Active Directory Users and Computers) mmc snap-in.\n Right click the domain root. Select Find\u0026hellip;. In the Find: drop down box select Custom Search. Click the Advancedtab. In the Enter LDAP Query:field type: (\u0026amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32)). Click Find Now.  How to create users To create users without allowing blank passwords you must deal with the userAccountContol values:\n\u0026ldquo;When a new user account is created, the userAccountControl attribute for the account automatically has the UF_PASSWD_NOTREQDflag set, which indicates that no password is required for the account. If the security policies of the domain that the account is created in requires a password for all user accounts, then the UF_PASSWD_NOTREQDflag must be removed from the userAccountControl attribute for the account.\u0026rdquo;\nHere you can read on how to create user accounts:\nCreating a user (Windows)\nPASSWD_NOTREQD flag:\nThis Vbscript code example will create a user with UF_PASSWD_NOTREQD. The user will be allowed using blank passwords.\nSet objOU = GetObject(\u0026#34;LDAP://ou=sales,dc=contoso,dc=com\u0026#34;) Set objUser = objOU.Create(\u0026#34;User\u0026#34;, \u0026#34;cn=jsmith\u0026#34;) objUser.Put \u0026#34;sAMAccountName\u0026#34;,\u0026#34;jsmith\u0026#34; objUser.Put \u0026#34;givenName\u0026#34;,\u0026#34;james\u0026#34; objUser.SetInfo objUser.put \u0026#34;userPrincipalName\u0026#34;,objUser.sAMAccountName \u0026amp; \u0026#34;@contoso.com\u0026#34; objUser.AccountDisabled = False strPassword = \u0026#34;P@ssW0rdPh@rse\u0026#34; objUser.SetPassword strPassword objUser.SetInfo This Vbscript code example manage the userAccountControl attribute. It removes both the disabled state and \u0026ldquo;password not required\u0026rdquo; setting:\nSet objOU = GetObject(\u0026#34;LDAP://ou=sales,dc=contoso,dc=com\u0026#34;) Set objUser = objOU.Create(\u0026#34;User\u0026#34;, \u0026#34;cn=jsmith\u0026#34;) objUser.Put \u0026#34;sAMAccountName\u0026#34;,\u0026#34;jsmith\u0026#34; objUser.Put \u0026#34;givenName\u0026#34;,\u0026#34;james\u0026#34; objUser.SetInfo objUser.put \u0026#34;userPrincipalName\u0026#34;,objUser.sAMAccountName \u0026amp; \u0026#34;@contoso.com\u0026#34; Const ADS_UF_ACCOUNT_DISABLE = 2 Const ADS_UF_PASSWD_NOTREQD = 32 intUAc = objUser.Get (\u0026#34;userAccountControl\u0026#34;) objUser.put \u0026#34;userAccountControl\u0026#34;, intUAc And (Not ADS_UF_PASSWD_NOTREQD) And (Not ADS_UF_ACCOUNT_DISABLE) strPassword = \u0026#34;P@ssW0rdPh@rse\u0026#34; objUser.SetPassword strPassword objUser.SetInfo How do I know if I got blank passwords and how do I deal with it? Well, you can run a script to test every account against a blank password or why not find users with passwords that don\u0026rsquo;t comply with the password policy and remove the user setting for other users at the same time? :)\nHere\u0026rsquo;s a code-sample that remove the ADS_UF_PASSWD_NOTREQD. If a user has a blank password the script will report an error stating it does not follow the password policy for the domain, as long as you have a password policy in the domain that requires minimum length above zero characters. If the script succeeds it will also report the status of the account, since if the account is also disabled it still could have a blank password.\nYou could test your environment with this code-sample and review the output.\nHopefully you do not have accounts with ADS_UF_PASSWD_NOTREQD. If you do you follow this procedure to find them.\nYou could still of course have accounts with blank passwords in case you had a domain password policy with no minimum password length. To remediate you have to make sure your password policies are in line with you security policy and that users are required to change their passwords and do not have \u0026ldquo;Password never expires\u0026rdquo; ticked in.\n","permalink":"https://managedpriv.com/blog/do-you-allow-blank-passwords-in-your-environment/","tags":["security","active directory","password"],"title":"Do You Allow Blank Passwords In Your Environment"}]